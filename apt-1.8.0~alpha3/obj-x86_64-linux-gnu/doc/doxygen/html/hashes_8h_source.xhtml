<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/hashes.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.8.0~alpha3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">hashes.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Hashes - Simple wrapper around the hash functions</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   This is just used to make building the methods simpler, this is the</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   only interface required..</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   ##################################################################### */</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#ifndef APTPKG_HASHES_H</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#define APTPKG_HASHES_H</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/md5.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/sha1.h&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/sha2.h&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#ifndef APT_8_CLEANER_HEADERS</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">using</span> std::min;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">using</span> std::vector;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifndef APT_10_CLEANER_HEADERS</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/fileutl.h&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// helper class that contains hash function name</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// and hash</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classHashString.xhtml">   38</a></span>&#160;<span class="keyword">class </span><a class="code" href="classHashString.xhtml">HashString</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;   std::string Type;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;   std::string Hash;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> * _SupportedHashes[10];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   <span class="comment">// internal helper</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;   std::string GetHashForFile(std::string filename) <span class="keyword">const</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>(std::string Type, std::string Hash);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>(std::string StringedHashString);  <span class="comment">// init from str as &quot;type:hash&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a>();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   <span class="comment">// get hash type used</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   std::string HashType()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Type; };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   std::string HashValue()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> Hash; };</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;method was const-ified&quot;</span>) std::string HashType() { <span class="keywordflow">return</span> Type; };</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;method was const-ified&quot;</span>) std::string HashValue() { <span class="keywordflow">return</span> Hash; };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;   <span class="comment">// verify the given filename against the currently loaded hash</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   <span class="keywordtype">bool</span> VerifyFile(std::string filename) <span class="keyword">const</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;   <span class="comment">// generate a hash string from the given filename</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   <span class="keywordtype">bool</span> FromFile(std::string filename);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   <span class="comment">// helper</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;   std::string toStr() <span class="keyword">const</span>;                    <span class="comment">// convert to str as &quot;type:hash&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="keywordtype">bool</span> empty() <span class="keyword">const</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   <span class="keywordtype">bool</span> usable() <span class="keyword">const</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;   <span class="keywordtype">bool</span> operator==(<a class="code" href="classHashString.xhtml">HashString</a> <span class="keyword">const</span> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   <span class="keywordtype">bool</span> operator!=(<a class="code" href="classHashString.xhtml">HashString</a> <span class="keyword">const</span> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;   <span class="comment">// return the list of hashes we support</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="keyword">static</span> APT_PURE <span class="keyword">const</span> <span class="keywordtype">char</span>** SupportedHashes();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;};</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml">   77</a></span>&#160;<span class="keyword">class </span><a class="code" href="classHashStringList.xhtml">HashStringList</a></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a> <span class="keyword">const</span> * find(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> type) <span class="keyword">const</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   <a class="code" href="classHashString.xhtml">HashString</a> <span class="keyword">const</span> * find(std::string <span class="keyword">const</span> &amp;type)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> find(type.c_str()); }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FileSize() <span class="keyword">const</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   <span class="keywordtype">bool</span> FileSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Size);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   <span class="keyword">static</span> APT_PURE <span class="keywordtype">bool</span> supported(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> type);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;   <span class="keywordtype">bool</span> push_back(<span class="keyword">const</span> <a class="code" href="classHashString.xhtml">HashString</a> &amp;hashString);</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml#a259cb5a711406a8c3e5d937eb9350cca">  119</a></span>&#160;   <span class="keywordtype">size_t</span> <a class="code" href="classHashStringList.xhtml#a259cb5a711406a8c3e5d937eb9350cca">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> list.size(); }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;   <span class="keywordtype">bool</span> VerifyFile(std::string filename) <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">  132</a></span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> list.empty(); }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;   <span class="keywordtype">bool</span> usable() <span class="keyword">const</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   <span class="keyword">typedef</span> std::vector&lt;HashString&gt;::const_iterator const_iterator;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml#a29305669b60ca1680752e2fc3592ba99">  146</a></span>&#160;   const_iterator <a class="code" href="classHashStringList.xhtml#a29305669b60ca1680752e2fc3592ba99">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> list.begin(); }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">  149</a></span>&#160;   const_iterator <a class="code" href="classHashStringList.xhtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> list.end(); }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classHashStringList.xhtml#ac8bb3912a3ce86b15842e79d0b421204">  152</a></span>&#160;   <span class="keywordtype">void</span> <a class="code" href="classHashStringList.xhtml#ac8bb3912a3ce86b15842e79d0b421204">clear</a>() { list.clear(); }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   <span class="keywordtype">bool</span> operator==(<a class="code" href="classHashStringList.xhtml">HashStringList</a> <span class="keyword">const</span> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;   <span class="keywordtype">bool</span> operator!=(<a class="code" href="classHashStringList.xhtml">HashStringList</a> <span class="keyword">const</span> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;   <a class="code" href="classHashStringList.xhtml">HashStringList</a>() {}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;   <span class="comment">// simplifying API-compatibility constructors</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;   <a class="code" href="classHashStringList.xhtml">HashStringList</a>(std::string <span class="keyword">const</span> &amp;hash) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      <span class="keywordflow">if</span> (hash.empty() == <span class="keyword">false</span>)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;         list.<a class="code" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back</a>(<a class="code" href="classHashString.xhtml">HashString</a>(hash));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;   }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;   <a class="code" href="classHashStringList.xhtml">HashStringList</a>(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> hash) {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="keywordflow">if</span> (hash != NULL &amp;&amp; hash[0] != <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;         list.<a class="code" href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">push_back</a>(<a class="code" href="classHashString.xhtml">HashString</a>(hash));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;   }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;   <span class="keyword">private</span>:</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;   std::vector&lt;HashString&gt; list;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;};</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">class </span><a class="code" href="classPrivateHashes.xhtml">PrivateHashes</a>;</div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classHashes.xhtml">  182</a></span>&#160;<span class="keyword">class </span><a class="code" href="classHashes.xhtml">Hashes</a></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;   <a class="code" href="classPrivateHashes.xhtml">PrivateHashes</a> * <span class="keyword">const</span> d;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;   <span class="comment">/* those will disappear in the future as it is hard to add new ones this way.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    * Use Add* to build the results and get them via GetHashStringList() instead */</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use general .Add* and .GetHashStringList methods instead of hardcoding specific hashes&quot;</span>) <a class="code" href="classMD5Summation.xhtml">MD5Summation</a> MD5;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use general .Add* and .GetHashStringList methods instead of hardcoding specific hashes&quot;</span>) <a class="code" href="classSHA1Summation.xhtml">SHA1Summation</a> SHA1;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use general .Add* and .GetHashStringList methods instead of hardcoding specific hashes&quot;</span>) <a class="code" href="classSHA256Summation.xhtml">SHA256Summation</a> SHA256;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use general .Add* and .GetHashStringList methods instead of hardcoding specific hashes&quot;</span>) <a class="code" href="classSHA512Summation.xhtml">SHA512Summation</a> SHA512;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> UntilEOF = 0;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;   <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> Data, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Size) APT_NONNULL(2);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Construct accordingly instead of choosing hashes while adding&quot;</span>) <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> Data, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Size, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> <a class="code" href="classHashes.xhtml">Hashes</a>) APT_NONNULL(2);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> Data) APT_NONNULL(2)</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;   {<span class="keywordflow">return</span> Add(reinterpret_cast&lt;unsigned char const *&gt;(Data),strlen(Data));};</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Add(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> Beg,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> End) APT_NONNULL(2,3)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   {<span class="keywordflow">return</span> Add(Beg,End-Beg);};</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   <span class="keyword">enum</span> SupportedHashes { MD5SUM = (1 &lt;&lt; 0), SHA1SUM = (1 &lt;&lt; 1), SHA256SUM = (1 &lt;&lt; 2),</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      SHA512SUM = (1 &lt;&lt; 3) };</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;   <span class="keywordtype">bool</span> AddFD(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 0);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Construct accordingly instead of choosing hashes while adding&quot;</span>) <span class="keywordtype">bool</span> AddFD(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Hashes);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;   <span class="keywordtype">bool</span> AddFD(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 0);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Construct accordingly instead of choosing hashes while adding&quot;</span>) <span class="keywordtype">bool</span> AddFD(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Hashes);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;   <a class="code" href="classHashStringList.xhtml">HashStringList</a> GetHashStringList();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;APT_IGNORE_DEPRECATED_PUSH</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;   Hashes();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;   Hashes(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Hashes);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;   Hashes(<a class="code" href="classHashStringList.xhtml">HashStringList</a> <span class="keyword">const</span> &amp;Hashes);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;   <span class="keyword">virtual</span> ~Hashes();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;APT_IGNORE_DEPRECATED_POP</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;   <span class="keyword">private</span>:</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;   APT_HIDDEN APT_PURE <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> boolsToFlag(<span class="keywordtype">bool</span> <span class="keyword">const</span> addMD5, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA1, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA256, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA512)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;   {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hashes = ~0;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="keywordflow">if</span> (addMD5 == <span class="keyword">false</span>) hashes &amp;= ~MD5SUM;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordflow">if</span> (addSHA1 == <span class="keyword">false</span>) hashes &amp;= ~SHA1SUM;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      <span class="keywordflow">if</span> (addSHA256 == <span class="keyword">false</span>) hashes &amp;= ~SHA256SUM;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      <span class="keywordflow">if</span> (addSHA512 == <span class="keyword">false</span>) hashes &amp;= ~SHA512SUM;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="keywordflow">return</span> hashes;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;   }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;APT_IGNORE_DEPRECATED_PUSH</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Construct accordingly instead of choosing hashes while adding&quot;</span>) <span class="keywordtype">bool</span> AddFD(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">bool</span> <span class="keyword">const</span> addMD5,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;         <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA1, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA256, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA512) {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordflow">return</span> AddFD(Fd, Size, boolsToFlag(addMD5, addSHA1, addSHA256, addSHA512));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;   };</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;   APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Construct accordingly instead of choosing hashes while adding&quot;</span>) <span class="keywordtype">bool</span> AddFD(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">bool</span> <span class="keyword">const</span> addMD5,</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;         <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA1, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA256, <span class="keywordtype">bool</span> <span class="keyword">const</span> addSHA512) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordflow">return</span> AddFD(Fd, Size, boolsToFlag(addMD5, addSHA1, addSHA256, addSHA512));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;   };</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;APT_IGNORE_DEPRECATED_POP</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classMD5Summation_xhtml"><div class="ttname"><a href="classMD5Summation.xhtml">MD5Summation</a></div><div class="ttdef"><b>Definition:</b> md5.h:41</div></div>
<div class="ttc" id="classHashStringList_xhtml"><div class="ttname"><a href="classHashStringList.xhtml">HashStringList</a></div><div class="ttdef"><b>Definition:</b> hashes.h:77</div></div>
<div class="ttc" id="classSHA512Summation_xhtml"><div class="ttname"><a href="classSHA512Summation.xhtml">SHA512Summation</a></div><div class="ttdef"><b>Definition:</b> sha2.h:74</div></div>
<div class="ttc" id="classSHA1Summation_xhtml"><div class="ttname"><a href="classSHA1Summation.xhtml">SHA1Summation</a></div><div class="ttdef"><b>Definition:</b> sha1.h:30</div></div>
<div class="ttc" id="classPrivateHashes_xhtml"><div class="ttname"><a href="classPrivateHashes.xhtml">PrivateHashes</a></div><div class="ttdef"><b>Definition:</b> hashes.cc:291</div></div>
<div class="ttc" id="classHashStringList_xhtml_accf9a4bd0c34d4a5f6a7dab66ea10cdc"><div class="ttname"><a href="classHashStringList.xhtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">HashStringList::end</a></div><div class="ttdeci">const_iterator end() const</div><div class="ttdef"><b>Definition:</b> hashes.h:149</div></div>
<div class="ttc" id="classFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:41</div></div>
<div class="ttc" id="classHashStringList_xhtml_a644718bb2fb240de962dc3c9a1fdf0dc"><div class="ttname"><a href="classHashStringList.xhtml#a644718bb2fb240de962dc3c9a1fdf0dc">HashStringList::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdef"><b>Definition:</b> hashes.h:132</div></div>
<div class="ttc" id="classHashes_xhtml"><div class="ttname"><a href="classHashes.xhtml">Hashes</a></div><div class="ttdef"><b>Definition:</b> hashes.h:182</div></div>
<div class="ttc" id="classHashStringList_xhtml_a29305669b60ca1680752e2fc3592ba99"><div class="ttname"><a href="classHashStringList.xhtml#a29305669b60ca1680752e2fc3592ba99">HashStringList::begin</a></div><div class="ttdeci">const_iterator begin() const</div><div class="ttdef"><b>Definition:</b> hashes.h:146</div></div>
<div class="ttc" id="classHashString_xhtml"><div class="ttname"><a href="classHashString.xhtml">HashString</a></div><div class="ttdef"><b>Definition:</b> hashes.h:38</div></div>
<div class="ttc" id="classHashStringList_xhtml_a7ab0545cb4ff2f208cb2ab14f21d357b"><div class="ttname"><a href="classHashStringList.xhtml#a7ab0545cb4ff2f208cb2ab14f21d357b">HashStringList::push_back</a></div><div class="ttdeci">bool push_back(const HashString &amp;hashString)</div><div class="ttdef"><b>Definition:</b> hashes.cc:223</div></div>
<div class="ttc" id="classSHA256Summation_xhtml"><div class="ttname"><a href="classSHA256Summation.xhtml">SHA256Summation</a></div><div class="ttdef"><b>Definition:</b> sha2.h:41</div></div>
<div class="ttc" id="classHashStringList_xhtml_a259cb5a711406a8c3e5d937eb9350cca"><div class="ttname"><a href="classHashStringList.xhtml#a259cb5a711406a8c3e5d937eb9350cca">HashStringList::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdef"><b>Definition:</b> hashes.h:119</div></div>
<div class="ttc" id="classHashStringList_xhtml_ac8bb3912a3ce86b15842e79d0b421204"><div class="ttname"><a href="classHashStringList.xhtml#ac8bb3912a3ce86b15842e79d0b421204">HashStringList::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> hashes.h:152</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
