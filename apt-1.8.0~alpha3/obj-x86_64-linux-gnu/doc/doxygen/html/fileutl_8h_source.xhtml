<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/contrib/fileutl.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.8.0~alpha3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li><li class="navelem"><a class="el" href="dir_c6ef23f15b074dcedf6810e24f2a7676.xhtml">contrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fileutl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   File Utilities</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   CopyFile - Buffered copy of a single file</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   GetLock - dpkg compatible lock file manipulation (fcntl)</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   FileExists - Returns true if the file exists</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   SafeGetCWD - Returns the CWD in a string with overrun protection </span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   The file class is a handy abstraction for various functions+classes</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   that need to accept filenames.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   This source is placed in the Public Domain, do with it what you will</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   It was originally written by Jason Gunthorpe.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   ##################################################################### */</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef PKGLIB_FILEUTL_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define PKGLIB_FILEUTL_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/aptconfiguration.h&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;zlib.h&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#ifndef APT_8_CLEANER_HEADERS</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using</span> std::string;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/* Define this for python-apt */</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#define APT_HAS_GZIP 1</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFdPrivate.xhtml">FileFdPrivate</a>;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classFileFd.xhtml">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classFileFdPrivate.xhtml">FileFdPrivate</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classGzipFileFdPrivate.xhtml">GzipFileFdPrivate</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classBz2FileFdPrivate.xhtml">Bz2FileFdPrivate</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classLzmaFileFdPrivate.xhtml">LzmaFileFdPrivate</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classLz4FileFdPrivate.xhtml">Lz4FileFdPrivate</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classZstdFileFdPrivate.xhtml">ZstdFileFdPrivate</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classDirectFileFdPrivate.xhtml">DirectFileFdPrivate</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classPipedFileFdPrivate.xhtml">PipedFileFdPrivate</a>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <span class="keyword">protected</span>:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   <span class="keywordtype">int</span> iFd;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   <span class="keyword">enum</span> LocalFlags {AutoClose = (1&lt;&lt;0),Fail = (1&lt;&lt;1),DelOnFail = (1&lt;&lt;2),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    HitEof = (1&lt;&lt;3), Replace = (1&lt;&lt;4), Compressed = (1&lt;&lt;5) };</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flags;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   std::string FileName;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;   std::string TemporaryFileName;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;   <span class="keyword">enum</span> OpenMode {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        ReadOnly = (1 &lt;&lt; 0),</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        WriteOnly = (1 &lt;&lt; 1),</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        ReadWrite = ReadOnly | WriteOnly,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Create = (1 &lt;&lt; 2),</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Exclusive = (1 &lt;&lt; 3),</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        Atomic = Exclusive | (1 &lt;&lt; 4),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        Empty = (1 &lt;&lt; 5),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        BufferedWrite = (1 &lt;&lt; 6),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        WriteEmpty = ReadWrite | Create | Empty,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        WriteExists = ReadWrite,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        WriteAny = ReadWrite | Create,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        WriteTemp = ReadWrite | Create | Exclusive,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        ReadOnlyGzip,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        WriteAtomic = ReadWrite | Create | Atomic</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keyword">enum</span> CompressMode</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      Auto = <span class="charliteral">&#39;A&#39;</span>,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      None = <span class="charliteral">&#39;N&#39;</span>,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      Extension = <span class="charliteral">&#39;E&#39;</span>,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      Gzip = <span class="charliteral">&#39;G&#39;</span>,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      Bzip2 = <span class="charliteral">&#39;B&#39;</span>,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      Lzma = <span class="charliteral">&#39;L&#39;</span>,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      Xz = <span class="charliteral">&#39;X&#39;</span>,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      Lz4 = <span class="charliteral">&#39;4&#39;</span>,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      Zstd = <span class="charliteral">&#39;Z&#39;</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   };</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Read(<span class="keywordtype">void</span> *To,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size,<span class="keywordtype">bool</span> AllowEof)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Jnk;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keywordflow">if</span> (AllowEof)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;         <span class="keywordflow">return</span> Read(To,Size,&amp;Jnk);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <span class="keywordflow">return</span> Read(To,Size);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   }   </div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   <span class="keywordtype">bool</span> Read(<span class="keywordtype">void</span> *To,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> *Actual = 0);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   <span class="keywordtype">bool</span> <span class="keyword">static</span> Read(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd, <span class="keywordtype">void</span> *To, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> * <span class="keyword">const</span> Actual = 0);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;   <span class="keywordtype">char</span>* <a class="code" href="classFileFd.xhtml#ab38ee7facb05c4733b5e27ee15f9c6e5">ReadLine</a>(<span class="keywordtype">char</span> *To, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Size);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classFileFd.xhtml#ab38ee7facb05c4733b5e27ee15f9c6e5">ReadLine</a>(std::string &amp;To);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;   <span class="keywordtype">bool</span> Flush();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;   <span class="keywordtype">bool</span> Write(<span class="keyword">const</span> <span class="keywordtype">void</span> *From,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;   <span class="keywordtype">bool</span> <span class="keyword">static</span> Write(<span class="keywordtype">int</span> Fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *From, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;   <span class="keywordtype">bool</span> Seek(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> To);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;   <span class="keywordtype">bool</span> Skip(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> To);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;   <span class="keywordtype">bool</span> Truncate(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> To);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Tell();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;   <span class="comment">// the size of the file content (compressed files will be uncompressed first)</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;   <span class="comment">// the size of the file itself</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FileSize();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;   time_t ModificationTime();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;   <span class="comment">/* You want to use &#39;unsigned long long&#39; if you are talking about a file</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">      to be able to support large files (&gt;2 or &gt;4 GB) properly.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">      This shouldn&#39;t happen all to often for the indexes, but deb&#39;s might be…</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">      And as the auto-conversation converts a &#39;unsigned long *&#39; to a &#39;bool&#39;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">      instead of &#39;unsigned long long *&#39; we need to provide this explicitly -</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">      otherwise applications magically start to fail… */</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;   <span class="keywordtype">bool</span> Read(<span class="keywordtype">void</span> *To,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *Actual) APT_DEPRECATED_MSG(<span class="stringliteral">&quot;The Actual variable you pass in should be an unsigned long long&quot;</span>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> R;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordtype">bool</span> <span class="keyword">const</span> T = Read(To, Size, &amp;R);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        *Actual = R;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> T;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;   }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;   <span class="keywordtype">bool</span> Open(std::string FileName,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode,CompressMode Compress,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> AccessMode = 0666);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;   <span class="keywordtype">bool</span> Open(std::string FileName,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode,<a class="code" href="structAPT_1_1Configuration_1_1Compressor.xhtml">APT::Configuration::Compressor</a> <span class="keyword">const</span> &amp;compressor,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> AccessMode = 0666);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Open(std::string <span class="keyword">const</span> &amp;FileName,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keyword">const</span> AccessMode = 0666) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="keywordflow">return</span> Open(FileName, Mode, None, AccessMode);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   };</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;   <span class="keywordtype">bool</span> OpenDescriptor(<span class="keywordtype">int</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, CompressMode Compress, <span class="keywordtype">bool</span> AutoClose=<span class="keyword">false</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;   <span class="keywordtype">bool</span> OpenDescriptor(<span class="keywordtype">int</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, <a class="code" href="structAPT_1_1Configuration_1_1Compressor.xhtml">APT::Configuration::Compressor</a> <span class="keyword">const</span> &amp;compressor, <span class="keywordtype">bool</span> AutoClose=<span class="keyword">false</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> OpenDescriptor(<span class="keywordtype">int</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, <span class="keywordtype">bool</span> AutoClose=<span class="keyword">false</span>) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      <span class="keywordflow">return</span> OpenDescriptor(Fd, Mode, None, AutoClose);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;   };</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;   <span class="keywordtype">bool</span> Close();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;   <span class="keywordtype">bool</span> Sync();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   </div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;   <span class="comment">// Simple manipulators</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">int</span> Fd() {<span class="keywordflow">return</span> iFd;};</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> Fd(<span class="keywordtype">int</span> fd) { OpenDescriptor(fd, ReadWrite);};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;   gzFile gzFd() APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Implementation detail, do not use to be able to support bzip2, xz and co&quot;</span>) APT_PURE;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsOpen() {<span class="keywordflow">return</span> iFd &gt;= 0;};</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Failed() {<span class="keywordflow">return</span> (Flags &amp; Fail) == Fail;};</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> EraseOnFailure() {Flags |= DelOnFail;};</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> OpFail() {Flags |= Fail;};</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> Eof() {<span class="keywordflow">return</span> (Flags &amp; HitEof) == HitEof;};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsCompressed() {<span class="keywordflow">return</span> (Flags &amp; Compressed) == Compressed;};</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;   <span class="keyword">inline</span> std::string &amp;Name() {<span class="keywordflow">return</span> FileName;};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFileName(std::string <span class="keyword">const</span> &amp;name) { FileName = name; };</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a>(std::string FileName,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> AccessMode = 0666);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a>(std::string FileName,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, CompressMode Compress, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> AccessMode = 0666);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a>();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a>(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode = ReadWrite, CompressMode Compress = None);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;   <a class="code" href="classFileFd.xhtml">FileFd</a>(<span class="keywordtype">int</span> <span class="keyword">const</span> Fd, <span class="keywordtype">bool</span> <span class="keyword">const</span> AutoClose);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;   <span class="keyword">virtual</span> ~<a class="code" href="classFileFd.xhtml">FileFd</a>();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;   <span class="keyword">private</span>:</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   <a class="code" href="classFileFdPrivate.xhtml">FileFdPrivate</a> * d;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;   APT_HIDDEN <a class="code" href="classFileFd.xhtml">FileFd</a>(<span class="keyword">const</span> <a class="code" href="classFileFd.xhtml">FileFd</a> &amp;);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;   APT_HIDDEN FileFd &amp; operator=(<span class="keyword">const</span> FileFd &amp;);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> OpenInternDescriptor(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">const</span> Mode, <a class="code" href="structAPT_1_1Configuration_1_1Compressor.xhtml">APT::Configuration::Compressor</a> <span class="keyword">const</span> &amp;compressor);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;   <span class="comment">// private helpers to set Fail flag and call _error-&gt;Error</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FileFdErrno(<span class="keyword">const</span> <span class="keywordtype">char</span>* Function, <span class="keyword">const</span> <span class="keywordtype">char</span>* Description,...) APT_PRINTF(3) APT_COLD;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FileFdError(<span class="keyword">const</span> <span class="keywordtype">char</span>* Description,...) APT_PRINTF(2) APT_COLD;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keywordtype">bool</span> RunScripts(<span class="keyword">const</span> <span class="keywordtype">char</span> *Cnf);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keywordtype">bool</span> CopyFile(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;From,<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;To);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keywordtype">bool</span> RemoveFile(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> Function, std::string <span class="keyword">const</span> &amp;FileName);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keywordtype">bool</span> RemoveFileAt(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> Function, <span class="keywordtype">int</span> <span class="keyword">const</span> dirfd, std::string <span class="keyword">const</span> &amp;FileName);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keywordtype">int</span> GetLock(std::string File,<span class="keywordtype">bool</span> Errors = <span class="keyword">true</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keywordtype">bool</span> FileExists(std::string File);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keywordtype">bool</span> RealFileExists(std::string File);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keywordtype">bool</span> DirectoryExists(std::string <span class="keyword">const</span> &amp;Path);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keywordtype">bool</span> CreateDirectory(std::string <span class="keyword">const</span> &amp;Parent, std::string <span class="keyword">const</span> &amp;Path);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;time_t GetModificationTime(std::string <span class="keyword">const</span> &amp;Path);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keywordtype">bool</span> Rename(std::string From, std::string To);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;std::string GetTempDir();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;std::string GetTempDir(std::string <span class="keyword">const</span> &amp;User);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<a class="code" href="classFileFd.xhtml">FileFd</a>* GetTempFile(std::string <span class="keyword">const</span> &amp;Prefix = <span class="stringliteral">&quot;&quot;</span>,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordtype">bool</span> ImmediateUnlink = <span class="keyword">true</span>,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <a class="code" href="classFileFd.xhtml">FileFd</a> * <span class="keyword">const</span> TmpFd = NULL);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keywordtype">bool</span> CreateAPTDirectoryIfNeeded(std::string <span class="keyword">const</span> &amp;Parent, std::string <span class="keyword">const</span> &amp;Path);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;std::vector&lt;std::string&gt; GetListOfFilesInDir(std::string <span class="keyword">const</span> &amp;Dir, std::string <span class="keyword">const</span> &amp;Ext,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                        <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;SortList, <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;AllowNoExt=<span class="keyword">false</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;std::vector&lt;std::string&gt; GetListOfFilesInDir(std::string <span class="keyword">const</span> &amp;Dir, std::vector&lt;std::string&gt; <span class="keyword">const</span> &amp;Ext,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                        <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;SortList);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;std::vector&lt;std::string&gt; GetListOfFilesInDir(std::string <span class="keyword">const</span> &amp;Dir, <span class="keywordtype">bool</span> SortList);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;std::string SafeGetCWD();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keywordtype">void</span> SetCloseExec(<span class="keywordtype">int</span> Fd,<span class="keywordtype">bool</span> Close);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordtype">void</span> SetNonBlock(<span class="keywordtype">int</span> Fd,<span class="keywordtype">bool</span> Block);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keywordtype">bool</span> WaitFd(<span class="keywordtype">int</span> Fd,<span class="keywordtype">bool</span> write = <span class="keyword">false</span>,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> timeout = 0);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;pid_t ExecFork();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;pid_t ExecFork(std::set&lt;int&gt; keep_fds);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keywordtype">void</span> MergeKeepFdsFromConfiguration(std::set&lt;int&gt; &amp;keep_fds);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keywordtype">bool</span> ExecWait(pid_t Pid,<span class="keyword">const</span> <span class="keywordtype">char</span> *Name,<span class="keywordtype">bool</span> Reap = <span class="keyword">false</span>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">// check if the given file starts with a PGP cleartext signature</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordtype">bool</span> StartsWithGPGClearTextSignature(std::string <span class="keyword">const</span> &amp;FileName);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordtype">bool</span> ChangeOwnerAndPermissionOfFile(<span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> requester, <span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> file, <span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> user, <span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> group, mode_t <span class="keyword">const</span> mode);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keywordtype">bool</span> DropPrivileges();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">// File string manipulators</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;std::string flNotDir(std::string File);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;std::string flNotFile(std::string File);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;std::string flNoLink(std::string File);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;std::string flExtension(std::string File);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;std::string flCombine(std::string Dir,std::string File);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;std::string flAbsPath(std::string File);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;APT_HIDDEN std::string flNormalize(std::string file);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">// simple c++ glob</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;std::vector&lt;std::string&gt; Glob(std::string <span class="keyword">const</span> &amp;pattern, <span class="keywordtype">int</span> flags=0);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keywordtype">bool</span> Popen(<span class="keyword">const</span> <span class="keywordtype">char</span> *Args[], <a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd, pid_t &amp;Child, FileFd::OpenMode Mode, <span class="keywordtype">bool</span> CaptureStderr, <span class="keywordtype">bool</span> Sandbox) APT_HIDDEN;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keywordtype">bool</span> Popen(<span class="keyword">const</span> <span class="keywordtype">char</span>* Args[], <a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd, pid_t &amp;Child, FileFd::OpenMode Mode, <span class="keywordtype">bool</span> CaptureStderr);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keywordtype">bool</span> Popen(<span class="keyword">const</span> <span class="keywordtype">char</span>* Args[], <a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd, pid_t &amp;Child, FileFd::OpenMode Mode);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;APT_HIDDEN <span class="keywordtype">bool</span> OpenConfigurationFileFd(std::string <span class="keyword">const</span> &amp;File, <a class="code" href="classFileFd.xhtml">FileFd</a> &amp;Fd);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="structAPT_1_1Configuration_1_1Compressor_xhtml"><div class="ttname"><a href="structAPT_1_1Configuration_1_1Compressor.xhtml">APT::Configuration::Compressor</a></div><div class="ttdoc">Representation of supported compressors. </div><div class="ttdef"><b>Definition:</b> aptconfiguration.h:94</div></div>
<div class="ttc" id="classFileFdPrivate_xhtml"><div class="ttname"><a href="classFileFdPrivate.xhtml">FileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1043</div></div>
<div class="ttc" id="classLz4FileFdPrivate_xhtml"><div class="ttname"><a href="classLz4FileFdPrivate.xhtml">Lz4FileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1566</div></div>
<div class="ttc" id="classGzipFileFdPrivate_xhtml"><div class="ttname"><a href="classGzipFileFdPrivate.xhtml">GzipFileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1385</div></div>
<div class="ttc" id="classLzmaFileFdPrivate_xhtml"><div class="ttname"><a href="classLzmaFileFdPrivate.xhtml">LzmaFileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1937</div></div>
<div class="ttc" id="classFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:41</div></div>
<div class="ttc" id="classDirectFileFdPrivate_xhtml"><div class="ttname"><a href="classDirectFileFdPrivate.xhtml">DirectFileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:2276</div></div>
<div class="ttc" id="classFileFd_xhtml_ab38ee7facb05c4733b5e27ee15f9c6e5"><div class="ttname"><a href="classFileFd.xhtml#ab38ee7facb05c4733b5e27ee15f9c6e5">FileFd::ReadLine</a></div><div class="ttdeci">char * ReadLine(char *To, unsigned long long const Size)</div><div class="ttdef"><b>Definition:</b> fileutl.cc:2737</div></div>
<div class="ttc" id="classPipedFileFdPrivate_xhtml"><div class="ttname"><a href="classPipedFileFdPrivate.xhtml">PipedFileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:2144</div></div>
<div class="ttc" id="classBz2FileFdPrivate_xhtml"><div class="ttname"><a href="classBz2FileFdPrivate.xhtml">Bz2FileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1512</div></div>
<div class="ttc" id="classZstdFileFdPrivate_xhtml"><div class="ttname"><a href="classZstdFileFdPrivate.xhtml">ZstdFileFdPrivate</a></div><div class="ttdef"><b>Definition:</b> fileutl.cc:1726</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
