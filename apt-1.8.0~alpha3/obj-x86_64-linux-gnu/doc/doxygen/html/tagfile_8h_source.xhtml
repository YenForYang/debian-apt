<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>apt: apt-pkg/tagfile.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">apt
   &#160;<span id="projectnumber">1.8.0~alpha3</span>
   </div>
   <div id="projectbrief">commandline package manager</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',false,false,'search.php','Search');
});
</script>
<div id="main-nav"></div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_18f22d4be2ca84c350e120b6506056ca.xhtml">apt-pkg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tagfile.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// -*- mode: cpp; mode: fold -*-</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Description                                                          /*{{{*/</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/* ######################################################################</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">   Fast scanner for RFC-822 type header information</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">   This parser handles Debian package files (and others). Their form is</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">   RFC-822 type header fields in groups separated by a blank line.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">   The parser reads the file and provides methods to step linearly</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">   over it or to jump to a pre-recorded start point and read that record.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">   A second class is used to perform pre-parsing of the record. It works</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">   by indexing the start of each header field and providing lookup </span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">   functions for header fields.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">   </span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">   ##################################################################### */</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                                                        <span class="comment">/*}}}*/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef PKGLIB_TAGFILE_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define PKGLIB_TAGFILE_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/macros.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifdef APT_PKG_EXPOSE_STRING_VIEW</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/string_view.h&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#ifndef APT_8_CLEANER_HEADERS</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;apt-pkg/fileutl.h&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">class </span><a class="code" href="classFileFd.xhtml">FileFd</a>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgTagSectionPrivate.xhtml">pkgTagSectionPrivate</a>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span><a class="code" href="classpkgTagFilePrivate.xhtml">pkgTagFilePrivate</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classpkgTagSection.xhtml">   49</a></span>&#160;<span class="keyword">class </span>pkgTagSection</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Section;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> AlphaIndexes[128];</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> BetaIndexes[128];</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;   <a class="code" href="classpkgTagSectionPrivate.xhtml">pkgTagSectionPrivate</a> * <span class="keyword">const</span> d;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start, <span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;End) <span class="keyword">const</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#if defined(APT_PKG_EXPOSE_STRING_VIEW)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;   APT_HIDDEN APT::StringView FindInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;   APT_HIDDEN APT::StringView FindRawInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;   APT_HIDDEN <span class="keywordtype">signed</span> <span class="keywordtype">int</span> FindIInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos,<span class="keywordtype">signed</span> <span class="keywordtype">long</span> Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindBInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos, <span class="keywordtype">bool</span> Default = <span class="keyword">false</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;   APT_HIDDEN <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FindULLInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlagInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos,uint8_t &amp;Flags, uint8_t <span class="keyword">const</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlagInternal(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Pos,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Flags, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;   <span class="keyword">protected</span>:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Stop;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> pkgTagSection &amp;rhs) {<span class="keywordflow">return</span> Section == rhs.Section;};</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> pkgTagSection &amp;rhs) {<span class="keywordflow">return</span> Section != rhs.Section;};</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#if !defined(APT_PKG_EXPOSE_STRING_VIEW) || defined(APT_COMPILING_TAGFILE_COMPAT_CC)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;   <span class="keywordtype">bool</span> Find(<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="structpkgTagSection_1_1Tag.xhtml">Tag</a>,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start, <span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;End) <span class="keyword">const</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   <span class="keywordtype">bool</span> Find(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   <span class="keywordtype">signed</span> <span class="keywordtype">int</span> FindI(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag,<span class="keywordtype">signed</span> <span class="keywordtype">long</span> Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;   <span class="keywordtype">bool</span> FindB(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag, <span class="keywordtype">bool</span> <span class="keyword">const</span> &amp;Default = <span class="keyword">false</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FindULL(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;   <span class="keywordtype">bool</span> FindFlag(<span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> Tag,uint8_t &amp;Flags,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                 uint8_t <span class="keyword">const</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;   <span class="keywordtype">bool</span> FindFlag(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Flags,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;   <span class="keywordtype">bool</span> Exists(<span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;   <span class="comment">// TODO: Remove internally</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;   std::string FindS(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;   std::string FindRawS(<span class="keyword">const</span> <span class="keywordtype">char</span> *Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;   <span class="comment">// Functions for lookup with a perfect hash function</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;   <span class="keyword">enum class</span> Key;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Find(Key key,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start, <span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;End) <span class="keyword">const</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Find(Key key,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;   APT_HIDDEN <span class="keywordtype">signed</span> <span class="keywordtype">int</span> FindI(Key key,<span class="keywordtype">signed</span> <span class="keywordtype">long</span> Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindB(Key key, <span class="keywordtype">bool</span> Default = <span class="keyword">false</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;   APT_HIDDEN <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FindULL(Key key, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlag(Key key,uint8_t &amp;Flags, uint8_t <span class="keyword">const</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlag(Key key,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Flags, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Exists(Key key) <span class="keyword">const</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#ifdef APT_PKG_EXPOSE_STRING_VIEW</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;   APT_HIDDEN APT::StringView Find(Key key) <span class="keyword">const</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;   APT_HIDDEN APT::StringView FindRaw(Key key) <span class="keyword">const</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Find(APT::StringView Tag,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start, <span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;End) <span class="keyword">const</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Find(APT::StringView Tag,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;Pos) <span class="keyword">const</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;   APT_HIDDEN APT::StringView Find(APT::StringView Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;   APT_HIDDEN APT::StringView FindRaw(APT::StringView Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;   APT_HIDDEN <span class="keywordtype">signed</span> <span class="keywordtype">int</span> FindI(APT::StringView Tag,<span class="keywordtype">signed</span> <span class="keywordtype">long</span> Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindB(APT::StringView, <span class="keywordtype">bool</span> Default = <span class="keyword">false</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;   APT_HIDDEN <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> FindULL(APT::StringView Tag, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> &amp;Default = 0) <span class="keyword">const</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlag(APT::StringView Tag,uint8_t &amp;Flags,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                 uint8_t <span class="keyword">const</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> FindFlag(APT::StringView Tag,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Flags,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flag) <span class="keyword">const</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Exists(APT::StringView Tag) <span class="keyword">const</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;   <span class="keywordtype">bool</span> <span class="keyword">static</span> FindFlag(uint8_t &amp;Flags, uint8_t <span class="keyword">const</span> Flag,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> Start, <span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> Stop);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;   <span class="keywordtype">bool</span> <span class="keyword">static</span> FindFlag(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;Flags, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Flag,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">char</span>* Start, <span class="keyword">const</span> <span class="keywordtype">char</span>* Stop);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;   APT_MUSTCHECK <span class="keywordtype">bool</span> <a class="code" href="classpkgTagSection.xhtml#a0bb98ff38db35c2002685f5a2c8ea28e">Scan</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *Start, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> MaxLength, <span class="keywordtype">bool</span> <span class="keyword">const</span> Restart = <span class="keyword">true</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> size()<span class="keyword"> const </span>{<span class="keywordflow">return</span> Stop - Section;};</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;   <span class="keywordtype">void</span> Trim();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> TrimRecord(<span class="keywordtype">bool</span> BeforeRecord, <span class="keyword">const</span> <span class="keywordtype">char</span>* &amp;End);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classpkgTagSection.xhtml#a5e103cd6cfc37abd35b285a8c48a812e">Count</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;   <span class="keywordtype">void</span> Get(<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Stop,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> I) <span class="keyword">const</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;   <span class="keyword">inline</span> <span class="keywordtype">void</span> GetSection(<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Start,<span class="keyword">const</span> <span class="keywordtype">char</span> *&amp;Stop)<span class="keyword"> const</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">   </span>{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      Start = Section;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      Stop = this-&gt;Stop;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;   };</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;   pkgTagSection();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;   <span class="keyword">virtual</span> ~pkgTagSection();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="structpkgTagSection_1_1Tag.xhtml">  165</a></span>&#160;   <span class="keyword">struct </span>Tag</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;   {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keyword">enum</span> ActionType { REMOVE, RENAME, REWRITE } Action;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      std::string Name;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      std::string Data;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      <span class="keyword">static</span> Tag Remove(std::string <span class="keyword">const</span> &amp;Name);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      <span class="keyword">static</span> Tag Rename(std::string <span class="keyword">const</span> &amp;OldName, std::string <span class="keyword">const</span> &amp;NewName);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="keyword">static</span> Tag Rewrite(std::string <span class="keyword">const</span> &amp;Name, std::string <span class="keyword">const</span> &amp;Data);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="keyword">private</span>:</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      Tag(ActionType <span class="keyword">const</span> Action, std::string <span class="keyword">const</span> &amp;Name, std::string <span class="keyword">const</span> &amp;Data) :</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;         Action(Action), Name(Name), Data(Data) {}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;   };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;   <span class="keywordtype">bool</span> <a class="code" href="classpkgTagSection.xhtml#a3d83a246100a2f662e45df5cda6e686e">Write</a>(<a class="code" href="classFileFd.xhtml">FileFd</a> &amp;File, <span class="keywordtype">char</span> <span class="keyword">const</span> * <span class="keyword">const</span> * <span class="keyword">const</span> Order = NULL, std::vector&lt;Tag&gt; <span class="keyword">const</span> &amp;Rewrite = std::vector&lt;Tag&gt;()) <span class="keyword">const</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;};</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">class </span>APT_DEPRECATED_MSG(&quot;Use pkgTagFile with the SUPPORT_COMMENTS flag instead&quot;) pkgUserTagSection : <span class="keyword">public</span> pkgTagSection</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;   <span class="keyword">virtual</span> <span class="keywordtype">void</span> TrimRecord(<span class="keywordtype">bool</span> BeforeRecord, <span class="keyword">const</span> <span class="keywordtype">char</span>* &amp;End) APT_OVERRIDE;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classpkgTagFile.xhtml">  199</a></span>&#160;<span class="keyword">class </span>pkgTagFile</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;   <a class="code" href="classpkgTagFilePrivate.xhtml">pkgTagFilePrivate</a> * <span class="keyword">const</span> d;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Fill();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Resize();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;   APT_HIDDEN <span class="keywordtype">bool</span> Resize(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> newSize);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;   <span class="keywordtype">bool</span> Step(pkgTagSection &amp;Section);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Offset();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;   <span class="keywordtype">bool</span> Jump(pkgTagSection &amp;Tag,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Offset);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;   <span class="keyword">enum</span> Flags</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;   {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      STRICT = 0,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      SUPPORT_COMMENTS = 1 &lt;&lt; 0,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;   };</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;   <span class="keywordtype">void</span> Init(<a class="code" href="classFileFd.xhtml">FileFd</a> * <span class="keyword">const</span> F, pkgTagFile::Flags <span class="keyword">const</span> Flags, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 32*1024);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;   <span class="keywordtype">void</span> Init(<a class="code" href="classFileFd.xhtml">FileFd</a> * <span class="keyword">const</span> F,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keyword">const</span> Size = 32*1024);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;   pkgTagFile(<a class="code" href="classFileFd.xhtml">FileFd</a> * <span class="keyword">const</span> F, pkgTagFile::Flags <span class="keyword">const</span> Flags, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 32*1024);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;   pkgTagFile(<a class="code" href="classFileFd.xhtml">FileFd</a> * <span class="keyword">const</span> F,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> Size = 32*1024);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;   <span class="keyword">virtual</span> ~pkgTagFile();</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;};</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> **TFRewritePackageOrder;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> **TFRewriteSourceOrder;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;APT_IGNORE_DEPRECATED_PUSH</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">struct </span>APT_DEPRECATED_MSG(&quot;Use pkgTagSection::Tag and <a class="code" href="classpkgTagSection.xhtml#a3d83a246100a2f662e45df5cda6e686e">pkgTagSection::Write</a>() instead&quot;) TFRewriteData</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Tag;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *Rewrite;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;   <span class="keyword">const</span> <span class="keywordtype">char</span> *NewTag;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;};</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;APT_DEPRECATED_MSG(<span class="stringliteral">&quot;Use pkgTagSection::Tag and pkgTagSection::Write() instead&quot;</span>) <span class="keywordtype">bool</span> TFRewrite(FILE *Output,pkgTagSection <span class="keyword">const</span> &amp;Tags,<span class="keyword">const</span> <span class="keywordtype">char</span> *Order[],</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;               TFRewriteData *Rewrite);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;APT_IGNORE_DEPRECATED_POP</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classpkgTagSection_xhtml_a0bb98ff38db35c2002685f5a2c8ea28e"><div class="ttname"><a href="classpkgTagSection.xhtml#a0bb98ff38db35c2002685f5a2c8ea28e">pkgTagSection::Scan</a></div><div class="ttdeci">APT_MUSTCHECK bool Scan(const char *Start, unsigned long MaxLength, bool const Restart=true)</div><div class="ttdoc">searches the boundaries of the current section </div><div class="ttdef"><b>Definition:</b> tagfile.cc:482</div></div>
<div class="ttc" id="classpkgTagSection_xhtml_a5e103cd6cfc37abd35b285a8c48a812e"><div class="ttname"><a href="classpkgTagSection.xhtml#a5e103cd6cfc37abd35b285a8c48a812e">pkgTagSection::Count</a></div><div class="ttdeci">unsigned int Count() const</div><div class="ttdoc">amount of Tags in the current section </div><div class="ttdef"><b>Definition:</b> tagfile.cc:930</div></div>
<div class="ttc" id="classpkgTagFilePrivate_xhtml"><div class="ttname"><a href="classpkgTagFilePrivate.xhtml">pkgTagFilePrivate</a></div><div class="ttdef"><b>Definition:</b> tagfile.cc:36</div></div>
<div class="ttc" id="classFileFd_xhtml"><div class="ttname"><a href="classFileFd.xhtml">FileFd</a></div><div class="ttdef"><b>Definition:</b> fileutl.h:41</div></div>
<div class="ttc" id="structpkgTagSection_1_1Tag_xhtml"><div class="ttname"><a href="structpkgTagSection_1_1Tag.xhtml">pkgTagSection::Tag</a></div><div class="ttdef"><b>Definition:</b> tagfile.h:165</div></div>
<div class="ttc" id="classpkgTagSection_xhtml_a3d83a246100a2f662e45df5cda6e686e"><div class="ttname"><a href="classpkgTagSection.xhtml#a3d83a246100a2f662e45df5cda6e686e">pkgTagSection::Write</a></div><div class="ttdeci">bool Write(FileFd &amp;File, char const *const *const Order=NULL, std::vector&lt; Tag &gt; const &amp;Rewrite=std::vector&lt; Tag &gt;()) const</div><div class="ttdef"><b>Definition:</b> tagfile.cc:987</div></div>
<div class="ttc" id="classpkgTagSectionPrivate_xhtml"><div class="ttname"><a href="classpkgTagSectionPrivate.xhtml">pkgTagSectionPrivate</a></div><div class="ttdef"><b>Definition:</b> tagfile.cc:83</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
